document.addEventListener("DOMContentLoaded", function() {
    // DOM要素の取得
    const instructionContainer = document.getElementById('instructionContainer');
    const startTestButton = document.getElementById('startTestButton');
    const userForm = document.getElementById('userForm');
    const submitButton = document.getElementById('submitButton');
    const usernameInput = document.getElementById('username');
    const wakeStatusInputs = document.getElementsByName('wakeStatus');
    const letterContainer = document.getElementById('letterContainer');
    const buttonsContainer = document.getElementById('buttonsContainer');
    const trialCounter = document.getElementById('trialCounter');
    const feedbackForm = document.getElementById('feedbackForm');
    const feedbackSubmitButton = document.getElementById('feedbackSubmitButton');
    const loadingIndicator = document.getElementById('loadingIndicator');
    const resultContainer = document.createElement('div');  // 結果表示用のコンテナ

    // 状態管理変数
    let username = '';
    let wakeStatus = '';
    let startTime = 0;

    let allLayouts = []; // すべてのレイアウトを格納する配列
    let trialCount = 0; // 現在のトライアル番号（0〜359）
    let results = [];
    let isExperimentStarted = false;
    let isExperimentEnded = false;  // テスト終了を追跡するフラグ

    // T位置を一意にするための配列
    let assignedTPositions = [];

    // レイアウト生成関数
    function generateAllLayouts(containerSize) {
        const numberOfBlocks = 18;
        const layoutsPerBlock = 20; // 10反復 + 10ランダム
        const totalLayouts = numberOfBlocks * layoutsPerBlock; // 360トライアル
        const tPositionMargin = containerSize * 0.1875; // 150 / 800 = 0.1875

        for (let block = 0; block < numberOfBlocks; block++) {
            // 一意のT位置を生成
            let tPosition = generateUniqueTPosition(containerSize, tPositionMargin);
            // 反復配置10種類を生成
            let repeatedLayouts = generateRepeatedLayouts(10, tPosition, containerSize);
            // ランダム配置10種類を生成
            let randomLayouts = generateRandomLayouts(10, tPosition, containerSize);
            // レイアウトを統合してallLayoutsに追加
            allLayouts.push(...repeatedLayouts, ...randomLayouts);
        }
    }

    // 一意のT位置を生成する関数
    function generateUniqueTPosition(containerSize, margin) {
        let position;
        let attempts = 0;
        let isUnique = false;

        while (!isUnique && attempts < 100) {
            position = {
                top: getRandomPosition(margin, containerSize - margin),
                left: getRandomPosition(margin, containerSize - margin)
            };
            isUnique = assignedTPositions.every(pos => {
                const distance = Math.sqrt(
                    Math.pow(pos.top - position.top, 2) + Math.pow(pos.left - position.left, 2)
                );
                return distance > containerSize * 0.25; // 200 / 800 = 0.25
            });
            attempts++;
        }

        if (isUnique) {
            assignedTPositions.push(position);
            return position;
        } else {
            // デフォルト位置（中央）を返す
            return { top: containerSize / 2, left: containerSize / 2 };
        }
    }

    // 反復配置10種類を生成する関数
    function generateRepeatedLayouts(count, tPosition, containerSize) {
        let layouts = [];
        for (let i = 0; i < count; i++) {
            let layout = generateLayoutWithFixedT(tPosition, false, containerSize);
            layouts.push(layout);
        }
        return layouts;
    }

    // ランダム配置10種類を生成する関数
    function generateRandomLayouts(count, tPosition, containerSize) {
        let layouts = [];
        for (let i = 0; i < count; i++) {
            let layout = generateLayoutWithFixedT(tPosition, true, containerSize);
            layouts.push(layout);
        }
        return layouts;
    }

    // レイアウトを生成する関数
    // isRandomがtrueの場合、L文字の配置順序をシャッフル
    function generateLayoutWithFixedT(tPosition, isRandom = false, containerSize) {
        let layout = [];
        // T字を固定位置に配置
        layout.push({
            letter: 'T',
            rotation: getRandomRotation(true), // 90度または270度のみ
            top: (tPosition.top / containerSize) * 100, // パーセンテージに変換
            left: (tPosition.left / containerSize) * 100 // パーセンテージに変換
        });

        // 各四分割に均等にL文字を配置
        const quadrants = getQuadrants(tPosition, containerSize);
        const totalLLetters = 11;
        const lLettersPerQuadrant = distributeLLetters(totalLLetters, quadrants.length);

        quadrants.forEach((quadrant, qIndex) => {
            for (let i = 0; i < lLettersPerQuadrant[qIndex]; i++) {
                let position;
                let rotation;
                let attempts = 0;
                do {
                    position = getRandomPositionInQuadrant(quadrant, containerSize);
                    rotation = getRandomRotation();
                    attempts++;
                    if (attempts > 100) break; // 無限ループ防止
                } while (isOverlapping(position, layout.map(letter => ({ top: letter.top, left: letter.left }))) ||
                         (Math.abs(position.top - (tPosition.top / containerSize) * 100) < 12.5 && Math.abs(position.left - (tPosition.left / containerSize) * 100) < 12.5));

                layout.push({
                    letter: 'L',
                    rotation: rotation,
                    top: position.top,
                    left: position.left
                });
            }
        });

        // ランダム配置の場合、'L'の配置順序をシャッフル
        if (isRandom) {
            layout = shuffleArray(layout);
        }

        // 余白や他の用途のアイテムを追加（必要に応じて）
        for (let i = layout.length; i < 20; i++) {
            const topPercent = (getRandomPosition(0, containerSize - (containerSize * 0.10)) / containerSize) * 100;
            const leftPercent = (getRandomPosition(0, containerSize - (containerSize * 0.10)) / containerSize) * 100;
            layout.push({
                letter: '',
                rotation: 0,
                top: topPercent,
                left: leftPercent
            });
        }

        return layout;
    }

    // 四分割された領域を取得する関数
    function getQuadrants(tPosition, containerSize) {
        const midX = containerSize / 2;
        const midY = containerSize / 2;
        return [
            { xMin: 0, xMax: midX, yMin: 0, yMax: midY },       // 左上
            { xMin: midX, xMax: containerSize, yMin: 0, yMax: midY },  // 右上
            { xMin: 0, xMax: midX, yMin: midY, yMax: containerSize },  // 左下
            { xMin: midX, xMax: containerSize, yMin: midY, yMax: containerSize } // 右下
        ];
    }

    // L字を均等に分配する関数
    function distributeLLetters(totalL, numQuadrants) {
        const base = Math.floor(totalL / numQuadrants);
        const remainder = totalL % numQuadrants;
        const distribution = Array(numQuadrants).fill(base);
        for (let i = 0; i < remainder; i++) {
            distribution[i]++;
        }
        return distribution;
    }

    // 四分割された領域内でランダムな位置を取得する関数
    function getRandomPositionInQuadrant(quadrant, containerSize) {
        // 余白を設けてL字がコンテナ外に出ないように
        const padding = containerSize * 0.05; // 5% padding
        const minTop = (quadrant.yMin + padding) / containerSize * 100;
        const maxTop = (quadrant.yMax - padding) / containerSize * 100;
        const minLeft = (quadrant.xMin + padding) / containerSize * 100;
        const maxLeft = (quadrant.xMax - padding) / containerSize * 100;
        return {
            top: getRandomPosition(minTop, maxTop),
            left: getRandomPosition(minLeft, maxLeft)
        };
    }

    // 配置順序をシャッフルする関数
    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }

    // ランダムな回転角度を取得する関数
    function getRandomRotation(isT = false) {
        if (isT) {
            const rotations = [90, 270];
            return rotations[Math.floor(Math.random() * rotations.length)];
        } else {
            const rotations = [0, 90, 180, 270];
            return rotations[Math.floor(Math.random() * rotations.length)];
        }
    }

    // ランダムな位置を取得する関数
    function getRandomPosition(min, max) {
        return Math.random() * (max - min) + min;
    }

    // オーバーラップ判定を行う関数
    function isOverlapping(position, positions) {
        const letterSizePercent = 10; // 10% as defined in CSS
        const threshold = letterSizePercent * 1.5; // 15%
        return positions.some(pos => {
            const distanceTop = Math.abs(pos.top - position.top);
            const distanceLeft = Math.abs(pos.left - position.left);
            return (distanceTop < threshold) && (distanceLeft < threshold);
        });
    }

    // レイアウト生成
    function initializeLayouts() {
        const containerWidth = letterContainer.clientWidth;
        const containerHeight = letterContainer.clientHeight;
        const containerSize = Math.min(containerWidth, containerHeight);
        generateAllLayouts(containerSize);
    }

    // 初期化
    initializeLayouts();

    // ウィンドウリサイズ時にレイアウトを再生成
    window.addEventListener('resize', () => {
        // リセット
        allLayouts = [];
        assignedTPositions = [];
        initializeLayouts();
    });

    // テスト開始ボタンを押したときの動作
    startTestButton.addEventListener('click', () => {
        instructionContainer.style.display = 'none';  // 説明文を非表示
        letterContainer.style.display = 'block';  // テストエリアを表示
        buttonsContainer.style.display = 'flex';  // ボタンエリアを表示
        trialCounter.style.display = 'block';  // テスト進行状況を表示
        startExperiment();  // テストを開始
    });

    // ボタンにクリックとタッチイベントを追加
    const leftButton = document.getElementById('leftButton');
    const rightButton = document.getElementById('rightButton');

    leftButton.addEventListener('click', () => checkResponse('left'));
    rightButton.addEventListener('click', () => checkResponse('right'));

    leftButton.addEventListener('touchstart', (e) => {
        e.preventDefault();
        checkResponse('left');
    });

    rightButton.addEventListener('touchstart', (e) => {
        e.preventDefault();
        checkResponse('right');
    });

    // キーボードの矢印キーをリスン
    document.addEventListener('keydown', handleKeyPress);

    // ユーザー名入力時のリアルタイムバリデーション
    usernameInput.addEventListener('input', () => {
        const isValid = /^[A-Za-z]*$/.test(usernameInput.value);
        if (!isValid) {
            usernameInput.setCustomValidity("ローマ字（英語のアルファベット）のみを使用してください。");
        } else {
            usernameInput.setCustomValidity("");
        }
    });

    // 実験を開始する関数
    function startExperiment() {
        isExperimentStarted = true;
        isExperimentEnded = false;
        trialCount = 0;
        results = [];
        startTime = new Date().toLocaleString();  // テスト開始時刻を記録
        nextTrial();
    }

    // 次のトライアルを実行する関数
    function nextTrial() {
        if (trialCount < allLayouts.length) {
            const currentBlock = Math.floor(trialCount / 20) + 1;
            const currentLayout = (trialCount % 20) + 1;
            trialCounter.textContent = `ブロック: ${currentBlock} / 18 | レイアウト: ${currentLayout} / 20`;
            letters = allLayouts[trialCount];  // 各トライアルに対応するレイアウトを設定
            displayLetters();
            letterContainer.style.visibility = 'visible';
            buttonsContainer.style.display = 'flex';
            trialStartTime = Date.now();  // 各トライアルの開始時刻を記録
            trialCount++;
        } else {
            endExperiment();  // テスト終了
        }
    }

    // キーボード入力を処理する関数
    function handleKeyPress(event) {
        if (isExperimentEnded) return;  // テスト終了後は無視

        if (isExperimentStarted && (event.key === 'ArrowLeft' || event.key === 'ArrowRight')) {
            const direction = event.key === 'ArrowLeft' ? 'left' : 'right';
            checkResponse(direction);
        }
    }

    // ユーザーの応答をチェックする関数
    function checkResponse(response) {
        if (!isExperimentStarted || isExperimentEnded) return;

        const endTime = Date.now();
        const reactionTime = endTime - trialStartTime;  // 反応時間を正確に計算

        // 現在のレイアウトからTの回転角度を取得
        const currentLayout = allLayouts[trialCount - 1];
        const targetItem = currentLayout.find(item => item.letter === 'T');
        const targetRotation = targetItem ? targetItem.rotation : 0;

        // 正誤判定
        const isCorrect = (response === 'left' && targetRotation === 270) || (response === 'right' && targetRotation === 90);

        // 結果を記録
        results.push({
            participant: username,
            condition: wakeStatus,
            testType: 'Implicit Learning',  // テストの種類を指定
            trialNumber: `${trialCount}`,
            result: isCorrect ? 'Correct' : 'Incorrect',
            responseTime: `${reactionTime}`
        });

        // フィードバックの表示
        displayFeedback(isCorrect);

        // 次のトライアルへ進む準備
        letterContainer.style.visibility = 'hidden';
        buttonsContainer.style.display = 'none';
        setTimeout(nextTrial, 1000);  // 次のトライアルへ遷移する前に1秒の遅延を追加
    }

    // フィードバックを表示する関数
    function displayFeedback(isCorrect) {
        const feedback = document.createElement('div');
        feedback.classList.add('feedback');
        feedback.textContent = isCorrect ? '正解！' : '不正解。';
        feedback.style.position = 'absolute';
        feedback.style.bottom = '10px';
        feedback.style.left = '50%';
        feedback.style.transform = 'translateX(-50%)';
        feedback.style.padding = '10px 20px';
        feedback.style.backgroundColor = isCorrect ? 'rgba(40, 167, 69, 0.8)' : 'rgba(220, 53, 69, 0.8)';
        feedback.style.color = '#fff';
        feedback.style.borderRadius = '5px';
        feedback.style.fontSize = '1rem';
        feedback.style.animation = 'fadeOut 1s forwards';

        letterContainer.appendChild(feedback);

        // フィードバックをアニメーションでフェードアウト
        setTimeout(() => {
            feedback.remove();
        }, 1000);
    }

    // レイアウトを表示する関数
    function displayLetters() {
        const letterItems = letterContainer.querySelectorAll('.letter-item');
        letterItems.forEach(item => item.remove());

        letters.forEach(item => {
            if (item.letter === '') return; // 空文字の場合は表示しない
            const div = document.createElement('div');
            div.classList.add('letter-item');
            div.textContent = item.letter;
            div.style.top = `${item.top}%`;
            div.style.left = `${item.left}%`;
            div.style.transform = `rotate(${item.rotation}deg)`;
            if (item.letter === 'T') {
                div.style.color = 'black';
            }
            letterContainer.appendChild(div);
        });

        // クロスヘアは静的に配置済みのため、ここでは不要
    }

    // 実験を終了する関数
    function endExperiment() {
        isExperimentEnded = true;  // テスト終了を記録
        letterContainer.style.display = 'none';  // テストエリアを非表示
        buttonsContainer.style.display = 'none';  // ボタンエリアを非表示
        trialCounter.style.display = 'none';  // 進行状況の表示を非表示
        userForm.style.display = 'block';  // テスト後にフォームを表示
    }

    // 結果をサーバーに送信する関数
    submitButton.addEventListener('click', () => {
        username = usernameInput.value.trim();
        wakeStatus = [...wakeStatusInputs].find(input => input.checked)?.value;

        const isAlphabet = /^[A-Za-z]+$/.test(username);
        
        if (!username || !wakeStatus) {
            alert('名前と起床状況を選択してください。');
            return;
        }

        if (!isAlphabet) {
            alert("ローマ字（英語のアルファベット）のみを使用してください。");
            return;
        }

        sendResultsToServer();  // 結果をサーバーに送信
    });

    function sendResultsToServer() {
        const data = {
            participant: username,
            condition: wakeStatus,
            results: results  // 収集された結果をサーバーに送信
        };

        // ローディングインジケーターの表示
        loadingIndicator.style.display = 'flex';

        fetch('http://localhost:3000/proxy', {  // 開発環境ではlocalhost、実運用では適切なURLに変更
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            loadingIndicator.style.display = 'none';  // ローディングインジケーターを非表示
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('成功:', data);
            displayThankYouMessage();  // 結果送信後にメッセージを表示
        })
        .catch(error => {
            loadingIndicator.style.display = 'none';  // ローディングインジケーターを非表示
            console.error('エラー:', error);
            alert('結果の送信に失敗しました。後ほど再試行してください。');
            // エラー時のUIを適切に再表示
            userForm.style.display = 'block';
        });
    }

    // 結果送信後のメッセージを表示する関数
    function displayThankYouMessage() {
        // 結果送信後に表示するメッセージと詳細
        resultContainer.classList.add('result-container');
        resultContainer.innerHTML = `
            <p>結果は送信されました。回答ありがとうございます。</p>
            <p>総正解数: ${calculateTotalCorrect()} / ${allLayouts.length}</p>
        `;
        document.body.innerHTML = '';  // 既存の要素をクリア
        document.body.appendChild(resultContainer);  // メッセージと詳細を表示

        // フィードバックフォームを表示
        feedbackForm.style.display = 'block';
    }

    // 正解数を計算する関数
    function calculateTotalCorrect() {
        return results.filter(result => result.result === 'Correct').length;
    }

    // フィードバックフォームの送信処理
    feedbackSubmitButton.addEventListener('click', () => {
        const feedback = document.getElementById('feedback').value.trim();
        if (!feedback) {
            alert('フィードバックを入力してください。');
            return;
        }

        sendFeedbackToServer(feedback);  // フィードバックをサーバーに送信
    });

    function sendFeedbackToServer(feedback) {
        const feedbackData = {
            participant: username,
            feedback: feedback
        };

        // ローディングインジケーターの表示
        loadingIndicator.style.display = 'flex';

        fetch('http://localhost:3000/feedback', {  // 開発環境ではlocalhost、実運用では適切なURLに変更
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(feedbackData)
        })
        .then(response => {
            loadingIndicator.style.display = 'none';  // ローディングインジケーターを非表示
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('フィードバック成功:', data);
            displayFinalThankYouMessage();  // フィードバック送信後にメッセージを表示
        })
        .catch(error => {
            loadingIndicator.style.display = 'none';  // ローディングインジケーターを非表示
            console.error('フィードバックエラー:', error);
            alert('フィードバックの送信に失敗しました。後ほど再試行してください。');
            // エラー時のUIを適切に再表示
            feedbackForm.style.display = 'block';
        });
    }

    // フィードバック送信後の最終メッセージを表示する関数
    function displayFinalThankYouMessage() {
        const finalMessage = document.createElement('div');
        finalMessage.classList.add('result-container');
        finalMessage.innerHTML = `
            <p>フィードバックは送信されました。ご協力ありがとうございます。</p>
        `;
        document.body.innerHTML = '';  // 既存の要素をクリア
        document.body.appendChild(finalMessage);  // メッセージを表示
    }

    // フェードアウトアニメーションとスタイルの追加
    const style = document.createElement('style');
    style.innerHTML = `
        @keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; }
        }
    `;
    document.head.appendChild(style);
});
